from abc import ABC, abstractmethod
from dataclasses import dataclass
from uuid import uuid4


@dataclass
class НалаштуванняКорабля:
    загальна_грузопідйомність: int
    максимальна_кількість_всіх_контейнерів: int
    максимальна_кількість_базових_контейнерів: int
    максимальна_кількість_важких_контейнерів: int
    максимальна_кількість_рефрижераторних_контейнерів: int
    максимальна_кількість_рідких_контейнерів: int
    витрати_пального_на_км: float


class IКорабель(ABC):

    @abstractmethod
    def вирушити_в(self, порт) -> bool:
        pass

    @abstractmethod
    def заправити(self, кількість_пального: float) -> None:
        pass

    @abstractmethod
    def завантажити(self, контейнер) -> bool:
        pass

    @abstractmethod
    def розвантажити(self, контейнер) -> bool:
        pass


class Корабель(IКорабель):

    def __init__(self, порт, налаштування_корабля: НалаштуванняКорабля = None, пальне: float = 0.0) -> None:
        self.id = uuid4()
        self.пальне = пальне
        self.порт = порт
        self.налаштування = налаштування_корабля
        self.контейнери = []

    def отримати_поточні_контейнери(self) -> list:
        return self.контейнери

    def вирушити_в(self, порт_куди):
        витрати_пального_на_плавання = self.порт.отримати_відстань(порт_куди) * self.налаштування.витрати_пального_на_км
        for контейнер in self.контейнери:
            витрати_пального_на_плавання += контейнер.витрати()
        if self.порт is порт_куди:
            print('Корабель вже знаходиться в цьому порту')
        else:
            if витрати_пального_на_плавання < self.пальне:
                print('<-Корабель вирушає в новий порт->')
                self.порт.вихідний_корабель(self)
                порт_куди.вхідний_корабель(self)
                self.порт = порт_куди
                self.пальне -= витрати_пального_на_плавання
            else:
                print('<-У корабля недостатньо пального для плавання->')

    def заправити(self, кількість_пального: float) -> None:
        self.пальне += кількість_пального

    def завантажити(self, контейнер):
        if контейнер in self.порт.контейнери:
            if self.налаштування.максимальна_кількість_всіх_контейнерів >= len(self.контейнери) + 1:
                self.контейнери.append(контейнер)
                self.порт.контейнери.remove(контейнер)
                print('<-Контейнер завантажено на корабель->')
            else:
                print('<-Корабель повний і не може завантажити більше контейнерів->')
        else:
            print('<-Цей контейнер знаходиться в іншому порту->')

    def розвантажити(self, контейнер):
        if контейнер in self.контейнери:
            self.контейнери.remove(контейнер)
            self.порт.контейнери.append(контейнер)
            print('<-Контейнер розвантажено з корабля->')
        else:
            print('<-Цей контейнер не знаходиться на цьому кораблі->')
